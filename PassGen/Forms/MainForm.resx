<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAADs7Ozo6Ojk5OTf39/c3NzY2NjV1dXS0tLQ0NDOzs7Hx8e5ubl6enoAAACw
        sLCsrKylpaVpaWkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADv7+/s7Ozp
        6enm5ubi4uLf39/c3NzY2NjV1dXR0dHJycm5ubkAAACSkpK8vLza2tra2tqnp6dra2sAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADz8/Pv7+/s7Ozp6enm5ubi4uLf39/c3NzY2NjU1NTN
        zc16enoAAADm5ubm5ubCwsJ6enoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAD29vbz8/Pv7+/s7Ozp6enm5ubi4uLf39/c3NzY2NjS0tIAAACurq7m5uaJiYkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5+fn29vbz8/Pv7+/s7Ozp6enm
        5ubi4uLf39/c3Nx6enoAAACYmJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD/AH//+AAP/+AAA//AAAH/gAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAPAAAAD4AAAA/AA
        AAPwAAAD8AAAA/AAAAP4AAAD+AAAA/wAAAP+AAAD/gAAA/4AAAP+AAAD/gAAA/4AAAP+AAAD/gAAD/4A
        AD/+AAD//gAD/w==
</value>
  </data>
</root>